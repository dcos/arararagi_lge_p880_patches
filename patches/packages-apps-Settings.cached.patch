diff --git a/res/layout/installed_app_details.xml b/res/layout/installed_app_details.xml
index 577cfd4..0f5a32f 100644
--- a/res/layout/installed_app_details.xml
+++ b/res/layout/installed_app_details.xml
@@ -70,6 +70,13 @@
                 android:layout_marginTop="4dip"
                 android:text="@string/privacy_guard_switch_label" />
 
+            <!-- HALO notification state for this package -->
+            <CheckBox android:id="@+id/halo_state"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="start"
+                android:layout_marginTop="4dip" />
+
         </LinearLayout>
 
         <TextView
diff --git a/res/values/arrays.xml b/res/values/arrays.xml
index 14e1fc8..ecc5e2b 100644
--- a/res/values/arrays.xml
+++ b/res/values/arrays.xml
@@ -77,6 +77,27 @@
         <item>1800000</item>
     </string-array>
     
+    <string-array name="button_backlight_entries">
+        <item>Auto</item>
+        <item>Off</item>
+        <item>On</item>
+        <item>Force off</item>
+        <item>Force on</item>
+    </string-array>
+
+    <string-array name="button_backlight_values" translatable="false">
+        <!-- Do not translate. -->
+        <item>0</item>
+        <!-- Do not translate. -->
+        <item>1</item>
+        <!-- Do not translate. -->
+        <item>2</item>
+        <!-- Do not translate. -->
+        <item>3</item>
+        <!-- Do not translate. -->
+        <item>4</item>
+    </string-array>
+
     <!-- Display settings.  The delay in inactivity before the dream is shown. These are shown in a list dialog. -->
     <string-array name="dream_timeout_entries">
         <item>Never</item>
@@ -772,4 +793,22 @@
         <!-- Always allow app to send to premium SMS short code. -->
         <item>Always allow</item>
     </string-array>
+
+    <string-array name="entries_halo_state">
+        <item>@string/halo_state_black</item>
+        <item>@string/halo_state_white</item>
+    </string-array>
+
+    <string-array name="values_halo_state" translatable="false">
+        <item>1</item>
+        <item>0</item>
+    </string-array>
+
+    <string-array name="location_entries_gps_source">
+        <item>Use Internal GPS</item>
+    </string-array>
+
+    <string-array name="location_values_gps_source" translatable="false">
+        <item>0</item>
+    </string-array>
 </resources>
diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index cc507c3..2880242 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -733,6 +733,7 @@
     <string name="title_tile_profile">Profile</string>
     <string name="title_tile_autorotate">Orientation</string>
     <string name="title_tile_settings">Settings</string>
+    <string name="title_tile_quickmemo">QuickMemo</string>
     <string name="title_tile_sound">Sound</string>
     <string name="title_tile_sync">Sync</string>
     <string name="title_tile_wifiap">Wi-Fi AP</string>
@@ -882,6 +883,9 @@ two in order to insert additional control points. \'Remove\' deletes the selecte
     <string name="auto_brightness_sensitivity_high">High</string>
     <string name="auto_brightness_sensitivity_veryhigh">Very high</string>
 
+    <!-- Button backlight mode -->
+    <string name="button_backlight_mode">Button light</string>
+
     <!-- Advanced reboot options -->
     <string name="advanced_reboot_title">Advanced reboot</string>
     <string name="advanced_reboot_summary">When unlocked, include options in the power menu for rebooting into recovery or bootloader</string>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index 912782d..25fced6 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -2308,6 +2308,14 @@
     <!-- [CHAR LIMIT=45] Section heading for location sources -->
     <string name="location_sources_heading">Location sources</string>
 
+    <!-- GPS Source selection -->
+    <string name="location_gps_source_title">GPS source</string>
+    <string name="location_gps_source_summary">Choose to use either an external Bluetooth GPS antenn
+ nternal GPS antenna as location provider</string>
+    <string name="location_gps_source_notification_title">Alert</string>
+    <string name="location_gps_source_notification">The GPS source has been switched! GPS will be di
+sabled. Please re-enable before use!</string>
+
     <!-- About --> <skip />
     <!-- Main settings screen, setting title for the user to go into the About phone screen -->
     <string name="about_settings" product="tablet">About tablet</string>
@@ -4334,6 +4342,9 @@
 
     <!-- Label for are-notifications-enabled checkbox in app details [CHAR LIMIT=20] -->
     <string name="app_notifications_switch_label">Show notifications</string>
+    <!-- Label for are-notifications-enabled checkbox in app details [CHAR LIMIT=20] -->
+    <string name="app_halo_label_black">Blacklist HALO notifications</string>
+    <string name="app_halo_label_white">Whitelist HALO notifications</string>
 
     <!--  Help URLs for some screens. Not specified here. Specified in product overlays --><skip/>
     <!-- Help menu label [CHAR LIMIT=20] -->
@@ -4378,4 +4389,17 @@
     <string name="cell_broadcast_settings">Cell broadcasts</string>
     <!-- Cell Broadcast settings description [CHAR LIMIT=100] -->
     <string name="cell_broadcast_settings_summary">Select the types of emergency alerts to display.</string>
+
+    <!-- HALO -->
+    <string name="halo_hide_title">Hide HALO after activity</string>
+    <string name="halo_hide_summary">HALO will appear for incoming tasks and scroll out of sight after a while</string>
+    <string name="halo_reversed_title">Reverse HALO gestures</string>
+    <string name="halo_reversed_summary">Applies tasking or dragging to the double-tap-swipe gesture</string>
+    <string name="halo_state_title">HALO policy</string>
+    <string name="halo_state_summary">For black/white-listing notifications pinging through HALO</string>
+    <string name="halo_state_black">Black list</string>
+    <string name="halo_state_white">White list</string>
+    <string name="halo_pause_title">HALO pause active app</string>
+    <string name="halo_pause_summary">When opening an app with HALO the underlying app will get paused (enabled by default on low memory devices)</string>
+
 </resources>
diff --git a/res/xml/location_settings.xml b/res/xml/location_settings.xml
index ab212d8..0236261 100644
--- a/res/xml/location_settings.xml
+++ b/res/xml/location_settings.xml
@@ -41,6 +41,14 @@
             android:dependency="location_toggle"
             android:persistent="false" />
 
+        <!-- GPS Source pref -->
+        <ListPreference android:key="location_gps_source"
+            android:dialogTitle="@string/location_gps_source_title"
+            android:title="@string/location_gps_source_title"
+            android:summary="@string/location_gps_source_summary"
+            android:entries="@array/location_entries_gps_source"
+            android:entryValues="@array/location_values_gps_source" />
+
 <!-- Disabled to avoid confusion on devices with no AGPS
      For Google experience devices we want AGPS on by default (if supported) so we don't really need this.
         <CheckBoxPreference
diff --git a/res/xml/system_settings.xml b/res/xml/system_settings.xml
index c5ffb5d..e3c052c 100644
--- a/res/xml/system_settings.xml
+++ b/res/xml/system_settings.xml
@@ -71,6 +71,13 @@
         android:title="@string/battery_light_title"
         android:fragment="com.android.settings.notificationlight.BatteryLightSettings" />
 
+   <ListPreference
+        android:key="button_backlight_mode"
+        android:title="@string/button_backlight_mode"
+        android:persistent="true"
+        android:entries="@array/button_backlight_entries"
+        android:entryValues="@array/button_backlight_values" />
+
     <PreferenceScreen
         android:key="hardware_keys"
         android:fragment="com.android.settings.cyanogenmod.HardwareKeys"
@@ -97,4 +104,29 @@
 
     </PreferenceCategory>
 
+    <ListPreference
+        android:key="halo_state"
+        android:dialogTitle="@string/halo_state_title"
+        android:title="@string/halo_state_title"
+        android:summary="@string/halo_state_summary"
+        android:entries="@array/entries_halo_state"
+        android:entryValues="@array/values_halo_state" />
+
+    <CheckBoxPreference
+        android:key="halo_hide"
+        android:title="@string/halo_hide_title"
+        android:summary="@string/halo_hide_summary"
+        android:defaultValue="false" />
+
+    <CheckBoxPreference
+        android:key="halo_reversed"
+        android:title="@string/halo_reversed_title"
+        android:summary="@string/halo_reversed_summary"
+        android:defaultValue="true" />
+
+    <CheckBoxPreference
+        android:key="halo_pause"
+        android:title="@string/halo_pause_title"
+        android:summary="@string/halo_pause_summary" />
+
 </PreferenceScreen>
diff --git a/src/com/android/settings/LocationSettings.java b/src/com/android/settings/LocationSettings.java
index 0e50188..26dbc30 100644
--- a/src/com/android/settings/LocationSettings.java
+++ b/src/com/android/settings/LocationSettings.java
@@ -17,6 +17,8 @@
 package com.android.settings;
 
 
+import android.bluetooth.BluetoothAdapter;
+import android.bluetooth.BluetoothDevice;
 import android.content.ContentQueryMap;
 import android.content.ContentResolver;
 import android.content.Context;
@@ -24,6 +26,7 @@ import android.content.Intent;
 import android.database.Cursor;
 import android.location.LocationManager;
 import android.preference.CheckBoxPreference;
+import android.preference.ListPreference;
 import android.preference.Preference;
 import android.preference.PreferenceScreen;
 import android.preference.SwitchPreference;
@@ -31,7 +34,9 @@ import android.provider.Settings;
 import android.util.AttributeSet;
 import android.view.View;
 import android.widget.TextView;
+import android.widget.Toast;
 
+import java.util.ArrayList;
 import java.util.Observable;
 import java.util.Observer;
 
@@ -51,6 +56,7 @@ public class LocationSettings extends SettingsPreferenceFragment
     private CheckBoxPreference mGps;
     private CheckBoxPreference mAssistedGps;
     private SwitchPreference mLocationAccess;
+    private ListPreference mGPSBTPref;
 
     // These provide support for receiving notification when Location Manager settings change.
     // This is necessary because the Network Location Provider can change settings
@@ -91,6 +97,30 @@ public class LocationSettings extends SettingsPreferenceFragment
         mNetwork = (CheckBoxPreference) root.findPreference(KEY_LOCATION_NETWORK);
         mGps = (CheckBoxPreference) root.findPreference(KEY_LOCATION_GPS);
         mAssistedGps = (CheckBoxPreference) root.findPreference(KEY_ASSISTED_GPS);
+        
+        // add BT gps devices
+        mGPSBTPref = (ListPreference) findPreference("location_gps_source");
+        ArrayList<CharSequence> entries = new ArrayList<CharSequence>();
+        for (String e : getResources().getStringArray(R.array.location_entries_gps_source)) {
+            entries.add(e);
+        }
+        ArrayList<CharSequence> values = new ArrayList<CharSequence>();
+        for (String v : getResources().getStringArray(R.array.location_values_gps_source)) {
+            values.add(v);
+        }
+        // add known bonded BT devices
+        BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
+        if ((mBluetoothAdapter != null) && (mBluetoothAdapter.isEnabled())) {
+            for (BluetoothDevice d : mBluetoothAdapter.getBondedDevices()) {
+                String dname = d.getName() + " - " + d.getAddress();
+                entries.add(dname);
+                values.add(d.getAddress());
+            }
+        }
+        mGPSBTPref.setEntries(entries.toArray(new CharSequence[entries.size()]));
+        mGPSBTPref.setEntryValues(values.toArray(new CharSequence[values.size()]));
+        mGPSBTPref.setDefaultValue("0");
+        mGPSBTPref.setOnPreferenceChangeListener(this);
 
         mLocationAccess.setOnPreferenceChangeListener(this);
         return root;
@@ -182,6 +212,22 @@ public class LocationSettings extends SettingsPreferenceFragment
     public boolean onPreferenceChange(Preference pref, Object newValue) {
         if (pref.getKey().equals(KEY_LOCATION_TOGGLE)) {
             onToggleLocationAccess((Boolean) newValue);
+        } else if (pref == mGPSBTPref) {
+            String oldPref = Settings.System.getString(getContentResolver(),
+                    Settings.Secure.EXTERNAL_GPS_BT_DEVICE);
+            String newPref = newValue == null ? "0" : (String) newValue;
+            // "0" represents the internal GPS.
+            Settings.System.putString(getContentResolver(), Settings.Secure.EXTERNAL_GPS_BT_DEVICE,
+                    newPref);
+            if (!oldPref.equals(newPref) && ("0".equals(oldPref) || "0".equals(newPref))) {
+                LocationManager locationManager =
+                        (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);
+                locationManager.setGPSSource(newPref);
+                // Show msg to inform user that source has been switched
+                Toast.makeText(this.getActivity(),
+                        getResources().getString(R.string.location_gps_source_notification),
+                        Toast.LENGTH_LONG).show();
+            }
         }
         return true;
     }
diff --git a/src/com/android/settings/applications/InstalledAppDetails.java b/src/com/android/settings/applications/InstalledAppDetails.java
index 4091b13..a8771da 100644
--- a/src/com/android/settings/applications/InstalledAppDetails.java
+++ b/src/com/android/settings/applications/InstalledAppDetails.java
@@ -107,11 +107,13 @@ public class InstalledAppDetails extends Fragment
     private AppWidgetManager mAppWidgetManager;
     private DevicePolicyManager mDpm;
     private ISms mSmsManager;
+    private INotificationManager mNotificationManager;
     private ApplicationsState mState;
     private ApplicationsState.Session mSession;
     private ApplicationsState.AppEntry mAppEntry;
     private boolean mInitialized;
     private boolean mShowUninstalled;
+    private boolean mHaloPolicyIsBlack = true;
     private PackageInfo mPackageInfo;
     private CanBeOnSdCardChecker mCanBeOnSdCardChecker;
     private View mRootView;
@@ -141,6 +143,7 @@ public class InstalledAppDetails extends Fragment
     private Button mMoveAppButton;
     private CompoundButton mNotificationSwitch;
     private CompoundButton mPrivacyGuardSwitch;
+    private CompoundButton mHaloState;
 
     private PackageMoveObserver mPackageMoveObserver;
 
@@ -383,15 +386,17 @@ public class InstalledAppDetails extends Fragment
     }
 
     private void initNotificationButton() {
-        INotificationManager nm = INotificationManager.Stub.asInterface(
-                ServiceManager.getService(Context.NOTIFICATION_SERVICE));
         boolean enabled = true; // default on
+        boolean allowedForHalo = true; // default on
         try {
-            enabled = nm.areNotificationsEnabledForPackage(mAppEntry.info.packageName);
+            enabled = mNotificationManager.areNotificationsEnabledForPackage(mAppEntry.info.packageName);
+            allowedForHalo = mNotificationManager.isPackageAllowedForHalo(mAppEntry.info.packageName);
         } catch (android.os.RemoteException ex) {
             // this does not bode well
         }
         mNotificationSwitch.setChecked(enabled);
+        mHaloState.setChecked((mHaloPolicyIsBlack ? !allowedForHalo : allowedForHalo));
+        mHaloState.setOnCheckedChangeListener(this);
         if (isThisASystemPackage()) {
             mNotificationSwitch.setEnabled(false);
         } else {
@@ -430,9 +435,16 @@ public class InstalledAppDetails extends Fragment
         mAppWidgetManager = AppWidgetManager.getInstance(getActivity());
         mDpm = (DevicePolicyManager)getActivity().getSystemService(Context.DEVICE_POLICY_SERVICE);
         mSmsManager = ISms.Stub.asInterface(ServiceManager.getService("isms"));
-
+        mNotificationManager = INotificationManager.Stub.asInterface(
+                ServiceManager.getService(Context.NOTIFICATION_SERVICE));
         mCanBeOnSdCardChecker = new CanBeOnSdCardChecker();
 
+        try {
+            mHaloPolicyIsBlack = mNotificationManager.isHaloPolicyBlack();
+        } catch (android.os.RemoteException ex) {
+            // System dead
+        }
+
         // Need to make sure we have loaded applications at this point.
         mSession.resume();
 
@@ -492,6 +504,8 @@ public class InstalledAppDetails extends Fragment
         mEnableCompatibilityCB = (CheckBox)view.findViewById(R.id.enable_compatibility_cb);
         
         mNotificationSwitch = (CompoundButton) view.findViewById(R.id.notification_switch);
+        mHaloState = (CompoundButton) view.findViewById(R.id.halo_state);
+        mHaloState.setText((mHaloPolicyIsBlack ? R.string.app_halo_label_black : R.string.app_halo_label_white));
 
         mPrivacyGuardSwitch = (CompoundButton) view.findViewById(R.id.privacy_guard_switch);
 
@@ -1327,12 +1341,9 @@ public class InstalledAppDetails extends Fragment
     }
 
     private void setNotificationsEnabled(boolean enabled) {
-        String packageName = mAppEntry.info.packageName;
-        INotificationManager nm = INotificationManager.Stub.asInterface(
-                ServiceManager.getService(Context.NOTIFICATION_SERVICE));
         try {
             final boolean enable = mNotificationSwitch.isChecked();
-            nm.setNotificationsEnabledForPackage(packageName, enabled);
+            mNotificationManager.setNotificationsEnabledForPackage(mAppEntry.info.packageName, enabled);
         } catch (android.os.RemoteException ex) {
             mNotificationSwitch.setChecked(!enabled); // revert
         }
@@ -1343,6 +1354,14 @@ public class InstalledAppDetails extends Fragment
         mPm.setPrivacyGuardSetting(packageName, enabled);
     }
 
+    private void setHaloState(boolean state) {
+        try {
+            mNotificationManager.setHaloStatus(mAppEntry.info.packageName, state);
+        } catch (android.os.RemoteException ex) {
+            mHaloState.setChecked(!state); // revert
+        }
+    }
+
     private int getPremiumSmsPermission(String packageName) {
         try {
             if (mSmsManager != null) {
@@ -1446,6 +1465,8 @@ public class InstalledAppDetails extends Fragment
             } else {
                 setPrivacyGuard(false);
             }
+        } else if (buttonView == mHaloState) {
+            setHaloState(isChecked);
         }
     }
 }
diff --git a/src/com/android/settings/cyanogenmod/QuickSettingsUtil.java b/src/com/android/settings/cyanogenmod/QuickSettingsUtil.java
index 653331a..8e3130b 100644
--- a/src/com/android/settings/cyanogenmod/QuickSettingsUtil.java
+++ b/src/com/android/settings/cyanogenmod/QuickSettingsUtil.java
@@ -32,6 +32,7 @@ import static com.android.internal.util.cm.QSConstants.TILE_MOBILEDATA;
 import static com.android.internal.util.cm.QSConstants.TILE_NETWORKMODE;
 import static com.android.internal.util.cm.QSConstants.TILE_NFC;
 import static com.android.internal.util.cm.QSConstants.TILE_PROFILE;
+import static com.android.internal.util.cm.QSConstants.TILE_QUICKMEMO;
 import static com.android.internal.util.cm.QSConstants.TILE_QUIETHOURS;
 import static com.android.internal.util.cm.QSConstants.TILE_RINGER;
 import static com.android.internal.util.cm.QSConstants.TILE_SCREENTIMEOUT;
@@ -125,6 +126,9 @@ public class QuickSettingsUtil {
                 TILE_SETTINGS, R.string.title_tile_settings,
                 "com.android.systemui:drawable/ic_qs_settings"));
         registerTile(new QuickSettingsUtil.TileInfo(
+                TILE_QUICKMEMO, R.string.title_tile_quickmemo,
+                "com.android.systemui:drawable/ic_qs_quickmemo"));
+        registerTile(new QuickSettingsUtil.TileInfo(
                 TILE_RINGER, R.string.title_tile_sound,
                 "com.android.systemui:drawable/ic_qs_ring_on"));
         registerTile(new QuickSettingsUtil.TileInfo(
diff --git a/src/com/android/settings/cyanogenmod/SystemSettings.java b/src/com/android/settings/cyanogenmod/SystemSettings.java
index 7be4e03..22709bf 100644
--- a/src/com/android/settings/cyanogenmod/SystemSettings.java
+++ b/src/com/android/settings/cyanogenmod/SystemSettings.java
@@ -16,6 +16,8 @@
 
 package com.android.settings.cyanogenmod;
 
+import android.app.ActivityManager;
+import android.app.INotificationManager;
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.res.Resources;
@@ -36,12 +38,20 @@ import android.view.WindowManagerGlobal;
 import com.android.settings.R;
 import com.android.settings.SettingsPreferenceFragment;
 
-public class SystemSettings extends SettingsPreferenceFragment  implements
+public class SystemSettings extends SettingsPreferenceFragment implements
         Preference.OnPreferenceChangeListener {
     private static final String TAG = "SystemSettings";
 
+    // If there is not setting in the provider, use this
+    private static final int FALLBACK_BUTTON_BACKLIGHT_VALUE = 0;
+
+    private static final String KEY_HALO_STATE = "halo_state";
+    private static final String KEY_HALO_HIDE = "halo_hide";
+    private static final String KEY_HALO_REVERSED = "halo_reversed";
+    private static final String KEY_HALO_PAUSE = "halo_pause";
     private static final String KEY_NOTIFICATION_PULSE = "notification_pulse";
     private static final String KEY_BATTERY_LIGHT = "battery_light";
+    private static final String KEY_BUTTON_BACKLIGHT = "button_backlight_mode";
     private static final String KEY_HARDWARE_KEYS = "hardware_keys";
     private static final String KEY_NAVIGATION_BAR = "navigation_bar";
     private static final String KEY_NAVIGATION_RING = "navigation_ring";
@@ -57,10 +67,16 @@ public class SystemSettings extends SettingsPreferenceFragment  implements
 
     private PreferenceScreen mNotificationPulse;
     private PreferenceScreen mBatteryPulse;
+    private ListPreference mButtonBacklightPref;
     private PreferenceScreen mPieControl;
+    private ListPreference mHaloState;
+    private CheckBoxPreference mHaloHide;
+    private CheckBoxPreference mHaloReversed;
+    private CheckBoxPreference mHaloPause;
     private ListPreference mExpandedDesktopPref;
     private CheckBoxPreference mExpandedDesktopNoNavbarPref;
 
+    private INotificationManager mNotificationManager;
     private boolean mIsPrimary;
 
     @Override
@@ -70,8 +86,9 @@ public class SystemSettings extends SettingsPreferenceFragment  implements
         addPreferencesFromResource(R.xml.system_settings);
         PreferenceScreen prefScreen = getPreferenceScreen();
 
-        // Only show the hardware keys config on a device that does not have a navbar
-        // and the navigation bar config on phones that has a navigation bar
+        // Only show the hardware keys config on a device that does not have a
+        // navbar and the navigation bar config on phones that has a navigation
+        // bar
         boolean removeKeys = false;
         boolean removeNavbar = false;
 
@@ -111,15 +128,29 @@ public class SystemSettings extends SettingsPreferenceFragment  implements
                 }
             }
         } else {
-            // Secondary user is logged in, remove all primary user specific preferences
+            // Secondary user is logged in, remove all primary user specific
+            // preferences
             prefScreen.removePreference(findPreference(KEY_BATTERY_LIGHT));
         }
 
+        // Button lights. Per user.
+        if (removeKeys) {
+            prefScreen.removePreference(findPreference(KEY_BUTTON_BACKLIGHT));
+        } else {
+            mButtonBacklightPref = (ListPreference) findPreference(KEY_BUTTON_BACKLIGHT);
+            final int currentButtonBacklight = Settings.System.getInt(getContentResolver(),
+                    Settings.System.BUTTON_BACKLIGHT_MODE, FALLBACK_BUTTON_BACKLIGHT_VALUE);
+            mButtonBacklightPref.setValueIndex(currentButtonBacklight);
+            mButtonBacklightPref.setOnPreferenceChangeListener(this);
+            updateButtonBacklight(currentButtonBacklight);
+        }
+
         // Preferences that applies to all users
         // Notification lights
         mNotificationPulse = (PreferenceScreen) findPreference(KEY_NOTIFICATION_PULSE);
         if (mNotificationPulse != null) {
-            if (!getResources().getBoolean(com.android.internal.R.bool.config_intrusiveNotificationLed)) {
+            if (!getResources().getBoolean(
+                    com.android.internal.R.bool.config_intrusiveNotificationLed)) {
                 prefScreen.removePreference(mNotificationPulse);
                 mNotificationPulse = null;
             }
@@ -133,6 +164,30 @@ public class SystemSettings extends SettingsPreferenceFragment  implements
             mPieControl = null;
         }
 
+        // Halo
+        mNotificationManager = INotificationManager.Stub.asInterface(
+                ServiceManager.getService(Context.NOTIFICATION_SERVICE));
+
+        mHaloState = (ListPreference) findPreference(KEY_HALO_STATE);
+        mHaloState.setValue(String.valueOf((isHaloPolicyBlack() ? "1" : "0")));
+        mHaloState.setOnPreferenceChangeListener(this);
+
+        mHaloHide = (CheckBoxPreference) findPreference(KEY_HALO_HIDE);
+        mHaloHide.setChecked(Settings.System.getInt(getContentResolver(),
+                Settings.System.HALO_HIDE, 0) == 1);
+        mHaloHide.setOnPreferenceChangeListener(this);
+
+        mHaloReversed = (CheckBoxPreference) findPreference(KEY_HALO_REVERSED);
+        mHaloReversed.setChecked(Settings.System.getInt(getContentResolver(),
+                Settings.System.HALO_REVERSED, 1) == 1);
+        mHaloReversed.setOnPreferenceChangeListener(this);
+
+        int isLowRAM = (ActivityManager.isLargeRAM()) ? 0 : 1;
+        mHaloPause = (CheckBoxPreference) findPreference(KEY_HALO_PAUSE);
+        mHaloPause.setChecked(Settings.System.getInt(getContentResolver(),
+                Settings.System.HALO_PAUSE, isLowRAM) == 1);
+        mHaloPause.setOnPreferenceChangeListener(this);
+
         // Expanded desktop
         mExpandedDesktopPref = (ListPreference) findPreference(KEY_EXPANDED_DESKTOP);
         mExpandedDesktopNoNavbarPref = (CheckBoxPreference) findPreference(KEY_EXPANDED_DESKTOP_NO_NAVBAR);
@@ -192,6 +247,36 @@ public class SystemSettings extends SettingsPreferenceFragment  implements
             boolean value = (Boolean) objValue;
             updateExpandedDesktop(value ? 2 : 0);
             return true;
+        } else if (preference == mButtonBacklightPref) {
+            int value = Integer.parseInt((String) objValue);
+            updateButtonBacklight(value);
+            return true;
+        } else if (preference == mHaloHide) {
+            boolean value = (Boolean) objValue;
+            Settings.System.putInt(getContentResolver(),
+                    Settings.System.HALO_HIDE, value
+                    ? 1 : 0);
+            return true;
+        } else if (preference == mHaloReversed) {
+            boolean value = (Boolean) objValue;
+            Settings.System.putInt(getContentResolver(),
+                    Settings.System.HALO_REVERSED, value
+                    ? 1 : 0);
+            return true;
+        } else if (preference == mHaloPause) {
+            boolean value = (Boolean) objValue;
+            Settings.System.putInt(getContentResolver(),
+                    Settings.System.HALO_PAUSE, value
+                    ? 1 : 0);
+            return true;
+        } else if (preference == mHaloState) {
+            boolean state = Integer.valueOf((String) objValue) == 1;
+            try {
+                mNotificationManager.setHaloPolicyBlack(state);
+            } catch (android.os.RemoteException ex) {
+                // System dead
+            }
+            return true;
         }
 
         return false;
@@ -213,7 +298,16 @@ public class SystemSettings extends SettingsPreferenceFragment  implements
         } else {
             mBatteryPulse.setSummary(getString(R.string.notification_light_disabled));
         }
-     }
+    }
+
+    private boolean isHaloPolicyBlack() {
+        try {
+            return mNotificationManager.isHaloPolicyBlack();
+        } catch (android.os.RemoteException ex) {
+                // System dead
+        }
+        return true;
+    }
 
     private void updatePieControlDescription() {
         if (Settings.System.getInt(getActivity().getContentResolver(),
@@ -224,6 +318,12 @@ public class SystemSettings extends SettingsPreferenceFragment  implements
         }
     }
 
+    private void updateButtonBacklight(int value) {
+        mButtonBacklightPref.setSummary(mButtonBacklightPref.getEntries()[value]);
+        Settings.System.putInt(getContentResolver(),
+                Settings.System.BUTTON_BACKLIGHT_MODE, value);
+    }
+
     private void updateExpandedDesktop(int value) {
         ContentResolver cr = getContentResolver();
         Resources res = getResources();
